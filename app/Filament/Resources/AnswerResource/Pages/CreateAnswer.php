<?php

namespace App\Filament\Resources\AnswerResource\Pages;

use App\Filament\Resources\AnswerResource;
use App\Filament\Resources\ExerciseResource\Widgets\ExerciseWidget;
use App\Models\Answer;
use App\Models\Exercise;
use Bmatovu\LaravelXml\Support\Facades\LaravelXml;
use Bmatovu\LaravelXml\Support\XmlValidator;
use Filament\Actions;
use Filament\Actions\Action;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Wizard;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\CreateRecord;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Wiebenieuwenhuis\FilamentCodeEditor\Components\CodeEditor;

class CreateAnswer extends CreateRecord
{
    protected static string $resource = AnswerResource::class;

    public Exercise $exercise;

    protected static bool $canCreateAnother  = false;

    /**
     * @throws \ReflectionException
     */
    public function mount(): void
    {
        parent::mount(); // TODO: Change the autogenerated stub

        Gate::authorize("answer-exo", $this->exercise);

    }

    public function form(Form $form): Form
    {
        return $form
            ->columns(1)
            ->schema([
                Hidden::make('student_id')
                    ->required()
                    ->default(auth()->id()),
                Hidden::make('exercise_id')
                    ->required()
                    ->default($this->exercise->getAttribute('id')),
                Wizard::make()
                    ->schema([
                        Wizard\Step::make('XSD Content')
                            ->visible($this->exercise->getAttribute('require_xsd'))
                            ->schema([
                                CodeEditor::make('xsd_content')
                                    ->default(function(){
                                        return Auth::user()->solved($this->exercise->id) ?
                                            Auth::user()->answers()->where('exercise_id', $this->exercise->id)->first()->content :
                                            '';
                                    })
                                    ->disabled(Auth::user()->solved($this->exercise->id))
                                    ->label('XSD content')
                                    ->required()
                                    ->rules([
                                        fn (): \Closure => function (string $attribute, $value, \Closure $fail) {
                                            $xmlValidator = new XmlValidator();
                                            if( !$xmlValidator->is_valid($value) ) {
                                                $fail('The :attribute is malformed.');
                                            }
                                        }
                                    ])
                            ]),
                        Wizard\Step::make('XML Content')
                            ->visible($this->exercise->getAttribute('require_xml'))
                            ->schema([
                                CodeEditor::make('xml_content')
                                    ->default(function(){
                                        return Auth::user()->solved($this->exercise->id) ?
                                            Auth::user()->answers()->where('exercise_id', $this->exercise->id)->first()->content :
                                            '';
                                    })
                                    ->rules([
                                        fn (): \Closure => function (string $attribute, $value, \Closure $fail) {
                                            $xmlValidator = new XmlValidator();
                                            if( !$xmlValidator->is_valid($value) ) {
                                                $fail('The :attribute is malformed.');
                                            }
                                        }
                                    ])
                                    ->disabled(Auth::user()->solved($this->exercise->id))
                                    ->label('XSD content')
                                    ->required()
                            ]),
                        Wizard\Step::make('XSLT Content')
                            ->visible($this->exercise->getAttribute('require_xslt'))
                            ->schema([
                                CodeEditor::make('xslt_content')
                                    ->default(function(){
                                        return Auth::user()->solved($this->exercise->id) ?
                                            Auth::user()->answers()->where('exercise_id', $this->exercise->id)->first()->content :
                                            '';
                                    })
                                    ->disabled(Auth::user()->solved($this->exercise->id))
                                    ->label('XSD content')
                                    ->required()
                                    ->rules([
                                        fn (): \Closure => function (string $attribute, $value, \Closure $fail) {
                                            $xmlValidator = new XmlValidator();
                                            if( !$xmlValidator->is_valid($value) ) {
                                                $fail('The :attribute is malformed.');
                                            }
                                        }
                                    ])
                            ])
                    ])
            ]);
    }

    protected function getHeaderWidgets(): array
    {
        return [
            ExerciseWidget::make([
                'exercise' => $this->exercise,
            ]),
        ];
    }

    protected function getCreateFormAction(): Action
    {
        return parent::getCreateFormAction()
            ->disabled(Auth::user()->solved($this->exercise->id))
            ->label('submit');
    }

    /**
     * @throws \Exception
     */
    protected function handleRecordCreation(array $data): Model
    {
        $validator = new XmlValidator();

        if( $this->exercise->getAttribute('require_xml') && $this->exercise->getAttribute('require_xsd') ){
            // create a temp file and put the xsd inside it
            $name = sprintf("%s.xsd", Str::uuid());
            Storage::put($name, $data['xsd_content']);

            $errors = $validator->validate(
                $data['xml_content'],
                Storage::path($name)
            );



            //now we can delete the file
            Storage::delete($name);


            if( $errors ){

                Notification::make()
                    ->title('Parsing Error')
                    ->body('XSD not matching with the XML')
                    ->danger()
                    ->send();
                throw ValidationException::withMessages($errors);
            }
        }

        return Answer::query()->create($data);
    }

}
